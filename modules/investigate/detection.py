from module import Module
from modules.investigate.procmon import CustomModule as Procmon


class CustomModule(Module):
    def __init__(self):
        information = {"Name": "Detection",
                       "Description": "This module detects if a particular binary is being used for UAC bypass",
                       "Author": "Santiago Hernandez Ramos"}

        # -----------name-----default_value--description
        options = {"binName": [None, "Name of the binary for analyze"],
                   "binFile": [None, "Path to a file generated by procmon_xmlparser module for the concrete binary, in a machine that we know it is not compromise"],
                   "procmonPath": [None, "Path to procmon binary"]}

        # Constructor of the parent class
        super(CustomModule, self).__init__(information, options)

    # This module must be always implemented, it is called by the run option
    def run_module(self):
        # customer arguments can be access by self.args["argument_name"], it is convinient to use the class variable self.args to referece variables, so it will contain the last value set by the user and permits the extensibility and the use of the modules methods from other modules.
        self._binName = self.get_value("binName")
        self._binFile = self.get_value("binFile")
        self._procmonPath = self.get_value("procmonPath")

        # Initialization of the auxiliary module
        p = Procmon()
        p.set_value("procmon_path", self._procmonPath)

        # Moudule processing
        p.
